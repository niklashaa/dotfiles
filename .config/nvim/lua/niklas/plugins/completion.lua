return {
  -- 'saghen/blink.cmp',
  -- -- optional: provides snippets for the snippet source
  -- dependencies = {
  --   'rafamadriz/friendly-snippets',
  --   'kristijanhusak/vim-dadbod-completion',
  -- },
  --
  -- -- use a release tag to download pre-built binaries
  -- version = '1.*',
  -- -- AND/OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust
  -- -- build = 'cargo build --release',
  -- -- If you use nix, you can build from source using latest nightly rust with:
  -- -- build = 'nix run .#build-plugin',
  --
  -- ---@module 'blink.cmp'
  -- ---@type blink.cmp.Config
  -- opts = {
  --   -- 'default' (recommended) for mappings similar to built-in completions (C-y to accept)
  --   -- 'super-tab' for mappings similar to vscode (tab to accept)
  --   -- 'enter' for enter to accept
  --   -- 'none' for no mappings
  --   --
  --   -- All presets have the following mappings:
  --   -- C-space: Open menu or open docs if already open
  --   -- C-n/C-p or Up/Down: Select next/previous item
  --   -- C-e: Hide menu
  --   -- C-k: Toggle signature help (if signature.enabled = true)
  --   --
  --   -- See :h blink-cmp-config-keymap for defining your own keymap
  --   keymap = { preset = 'default' },
  --
  --   appearance = {
  --     -- 'mono' (default) for 'Nerd Font Mono' or 'normal' for 'Nerd Font'
  --     -- Adjusts spacing to ensure icons are aligned
  --     nerd_font_variant = 'mono',
  --   },
  --
  --   -- (Default) Only show the documentation popup when manually triggered
  --   completion = { documentation = { auto_show = false } },
  --
  --   -- Default list of enabled providers defined so that you can extend it
  --   -- elsewhere in your config, without redefining it, due to `opts_extend`
  --   sources = {
  --     default = { 'lsp', 'path', 'snippets', 'buffer' },
  --     per_filetype = {
  --       -- SQL files: use ONLY dadbod + buffer (matching nvim-cmp config)
  --       sql = { 'dadbod', 'buffer' },
  --       mysql = { 'dadbod', 'buffer' },
  --       plsql = { 'dadbod', 'buffer' },
  --       -- Lua files: use lazydev for Neovim API completions + inherit defaults
  --       lua = { 'lazydev', inherit_defaults = true },
  --     },
  --     providers = {
  --       buffer = {
  --         opts = {
  --           -- get all buffers, even ones like neo-tree
  --           -- get_bufnrs = vim.api.nvim_list_bufs
  --           -- or (recommended) filter to only "normal" buffers
  --           get_bufnrs = function()
  --             return vim.tbl_filter(function(bufnr)
  --               return vim.bo[bufnr].buftype == ''
  --             end, vim.api.nvim_list_bufs())
  --           end,
  --         },
  --       },
  --       dadbod = {
  --         name = 'Dadbod',
  --         module = 'vim_dadbod_completion.blink',
  --         score_offset = 100, -- Higher priority for dadbod completions
  --         transform_items = function(ctx, items)
  --           -- Boost SQL keywords
  --           for _, item in ipairs(items) do
  --             if item.kind == require('blink.cmp.types').CompletionItemKind.Keyword then
  --               item.score_offset = (item.score_offset or 0) + 100
  --             end
  --           end
  --           return items
  --         end,
  --       },
  --       lazydev = {
  --         name = 'LazyDev',
  --         module = 'lazydev.integrations.blink',
  --         score_offset = 100, -- Higher priority for lazydev completions
  --       },
  --     },
  --   },
  --
  --   -- (Default) Rust fuzzy matcher for typo resistance and significantly better performance
  --   -- You may use a lua implementation instead by using `implementation = "lua"` or fallback to the lua implementation,
  --   -- when the Rust fuzzy matcher is not available, by using `implementation = "prefer_rust"`
  --   --
  --   -- See the fuzzy documentation for more information
  --   fuzzy = { implementation = 'prefer_rust_with_warning' },
  -- },
  -- opts_extend = { 'sources.default' },
}
